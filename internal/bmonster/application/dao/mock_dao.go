// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go
//
// Generated by this command:
//
//	mockgen -source=dao.go -destination=mock_dao.go -package=dao
//

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"
	time "time"

	dto "github.com/decorickey/go-apps/internal/bmonster/application/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockStudioDAO is a mock of StudioDAO interface.
type MockStudioDAO struct {
	ctrl     *gomock.Controller
	recorder *MockStudioDAOMockRecorder
}

// MockStudioDAOMockRecorder is the mock recorder for MockStudioDAO.
type MockStudioDAOMockRecorder struct {
	mock *MockStudioDAO
}

// NewMockStudioDAO creates a new mock instance.
func NewMockStudioDAO(ctrl *gomock.Controller) *MockStudioDAO {
	mock := &MockStudioDAO{ctrl: ctrl}
	mock.recorder = &MockStudioDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudioDAO) EXPECT() *MockStudioDAOMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockStudioDAO) FetchAll() ([]dto.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]dto.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockStudioDAOMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockStudioDAO)(nil).FetchAll))
}

// MockPerformerDAO is a mock of PerformerDAO interface.
type MockPerformerDAO struct {
	ctrl     *gomock.Controller
	recorder *MockPerformerDAOMockRecorder
}

// MockPerformerDAOMockRecorder is the mock recorder for MockPerformerDAO.
type MockPerformerDAOMockRecorder struct {
	mock *MockPerformerDAO
}

// NewMockPerformerDAO creates a new mock instance.
func NewMockPerformerDAO(ctrl *gomock.Controller) *MockPerformerDAO {
	mock := &MockPerformerDAO{ctrl: ctrl}
	mock.recorder = &MockPerformerDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformerDAO) EXPECT() *MockPerformerDAOMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockPerformerDAO) FetchAll() ([]dto.Performer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]dto.Performer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockPerformerDAOMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockPerformerDAO)(nil).FetchAll))
}

// MockTimetableDAO is a mock of TimetableDAO interface.
type MockTimetableDAO struct {
	ctrl     *gomock.Controller
	recorder *MockTimetableDAOMockRecorder
}

// MockTimetableDAOMockRecorder is the mock recorder for MockTimetableDAO.
type MockTimetableDAOMockRecorder struct {
	mock *MockTimetableDAO
}

// NewMockTimetableDAO creates a new mock instance.
func NewMockTimetableDAO(ctrl *gomock.Controller) *MockTimetableDAO {
	mock := &MockTimetableDAO{ctrl: ctrl}
	mock.recorder = &MockTimetableDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimetableDAO) EXPECT() *MockTimetableDAOMockRecorder {
	return m.recorder
}

// FetchByPerformerIDAndDate mocks base method.
func (m *MockTimetableDAO) FetchByPerformerIDAndDate(arg0 uint, arg1 time.Time) (dto.Timetable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByPerformerIDAndDate", arg0, arg1)
	ret0, _ := ret[0].(dto.Timetable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByPerformerIDAndDate indicates an expected call of FetchByPerformerIDAndDate.
func (mr *MockTimetableDAOMockRecorder) FetchByPerformerIDAndDate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByPerformerIDAndDate", reflect.TypeOf((*MockTimetableDAO)(nil).FetchByPerformerIDAndDate), arg0, arg1)
}

// FetchByStudioIDAndDate mocks base method.
func (m *MockTimetableDAO) FetchByStudioIDAndDate(arg0 uint, arg1 time.Time) (dto.Timetable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByStudioIDAndDate", arg0, arg1)
	ret0, _ := ret[0].(dto.Timetable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByStudioIDAndDate indicates an expected call of FetchByStudioIDAndDate.
func (mr *MockTimetableDAOMockRecorder) FetchByStudioIDAndDate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByStudioIDAndDate", reflect.TypeOf((*MockTimetableDAO)(nil).FetchByStudioIDAndDate), arg0, arg1)
}
